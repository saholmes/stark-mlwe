{"$message_type":"diagnostic","message":"this function takes 2 arguments but 3 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"crates/commitment/src/lib.rs","byte_start":2013,"byte_end":2036,"line_start":76,"line_end":76,"column_start":70,"column_end":93,"is_primary":false,"text":[{"text":"        let tree = MerkleTree::new(leaves.to_vec(), self.cfg.ds_tag, self.cfg.params.clone());","highlight_start":70,"highlight_end":93}],"label":"unexpected argument #3 of type `PoseidonParams`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/commitment/src/lib.rs","byte_start":1963,"byte_end":1978,"line_start":76,"line_end":76,"column_start":20,"column_end":35,"is_primary":true,"text":[{"text":"        let tree = MerkleTree::new(leaves.to_vec(), self.cfg.ds_tag, self.cfg.params.clone());","highlight_start":20,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected `MerkleChannelCfg`, found `Fp<MontBackend<FrConfig, 4>, 4>`","code":null,"level":"note","spans":[{"file_name":"crates/commitment/src/lib.rs","byte_start":1996,"byte_end":2011,"line_start":76,"line_end":76,"column_start":53,"column_end":68,"is_primary":true,"text":[{"text":"        let tree = MerkleTree::new(leaves.to_vec(), self.cfg.ds_tag, self.cfg.params.clone());","highlight_start":53,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected struct `MerkleChannelCfg`\n   found struct `ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<FrConfig, 4>, 4>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"/Volumes/SAHexternal 1/Documents/stark-mlwe/crates/merkle/src/lib.rs","byte_start":3992,"byte_end":3995,"line_start":134,"line_end":134,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new(leaves: Vec<F>, cfg: MerkleChannelCfg) -> Self {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the extra argument","code":null,"level":"help","spans":[{"file_name":"crates/commitment/src/lib.rs","byte_start":2011,"byte_end":2036,"line_start":76,"line_end":76,"column_start":68,"column_end":93,"is_primary":true,"text":[{"text":"        let tree = MerkleTree::new(leaves.to_vec(), self.cfg.ds_tag, self.cfg.params.clone());","highlight_start":68,"highlight_end":93}],"label":null,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"crates/commitment/src/lib.rs","byte_start":1996,"byte_end":2011,"line_start":76,"line_end":76,"column_start":53,"column_end":68,"is_primary":true,"text":[{"text":"        let tree = MerkleTree::new(leaves.to_vec(), self.cfg.ds_tag, self.cfg.params.clone());","highlight_start":53,"highlight_end":68}],"label":null,"suggested_replacement":"/* MerkleChannelCfg */","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 2 arguments but 3 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/commitment/src/lib.rs:76:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let tree = MerkleTree::new(leaves.to_vec(), self.cfg.ds_tag, self.cfg.params.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munexpected argument #3 of type `PoseidonParams`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected `MerkleChannelCfg`, found `Fp<MontBackend<FrConfig, 4>, 4>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/commitment/src/lib.rs:76:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let tree = MerkleTree::new(leaves.to_vec(), self.cfg.ds_tag, self.cfg.params.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mMerkleChannelCfg\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<FrConfig, 4>, 4>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Volumes/SAHexternal 1/Documents/stark-mlwe/crates/merkle/src/lib.rs:134:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(leaves: Vec<F>, cfg: MerkleChannelCfg) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the extra argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let tree = MerkleTree::new(leaves.to_vec(), \u001b[0m\u001b[0m\u001b[38;5;9mself.cfg.ds_tag, self.cfg.params.clone()\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let tree = MerkleTree::new(leaves.to_vec(), \u001b[0m\u001b[0m\u001b[38;5;10m/* MerkleChannelCfg */\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0061`.\u001b[0m\n"}
